// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteId     String[]  @db.ObjectId

   accounts     Account[]
  cart           Cart[]
  order          Order[]
  
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  user              User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String? @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token       String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Product {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  imageSrc      String
  createdAt     DateTime      @default(now())
  category      String
  color         String[]
  inStock       Boolean      @default(true)
  price         Int
  offer         Int
}
model Order {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  user              User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String? @db.ObjectId
  cart     Cart      @relation(fields: [cartId], references: [id])
  cartId   String    @db.ObjectId
  productid String
  quantity Int       @default(1)
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}